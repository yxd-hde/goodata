package generator

import (
	// "os"
	"encoding/xml"
	"fmt"
	// "github.com/nu7hatch/gouuid"
	"io/ioutil"
	"log"
	"os"
	"strings"
	// "reflect"
	// "runtime"
	"github.com/xkapasakal/goodata/odata-gen-go/descriptor"
	"text/template"
	// edmx "github.com/metaleap/go-xsd-pkg/docs.oasis-open.org/odata/odata/v4.0/os/schemas/edmx.xsd_go"
)

type Generator struct {
	*bytes.Buffer

	EdmxData []byte
	indent   string
}

// TODO path could be URL, file path ...
func New(path string) *Generator {
	g := new(Generator)
	b, err := ioutil.ReadFile(path)
	if err != nil {
		panic(err)
	}
	g.EdmxData = b
	return g
}

func (g *Generator) Generate() {
	// Unmarshal xml
	var q descriptor.Edmx
	err := xml.Unmarshal(g.EdmxData, &q)
	if err != nil {
		fmt.Printf("error: %v", err)
		return
	}

	for _, schema := range q.DataServices.Schema {
		if len(schema.EntityType) > 0 {
			file, err := os.Create(strings.ToLower(schema.Namespace) + ".od.go")
			if err != nil {
				log.Fatal(err)
			}
			t, parse_err := template.ParseFiles("templates/types.tmpl")
			if parse_err != nil {
				log.Fatal(parse_err)
			}
			err = t.Execute(file, schema)
			if err != nil {
				fmt.Printf("error: %v", err)
			}
		}
	}
}

// P prints the arguments to the generated output.  It handles strings and int32s, plus
// handling indirections because they may be *string, etc.
func (g *Generator) P(str ...interface{}) {
	g.WriteString(g.indent)
	for _, v := range str {
		switch s := v.(type) {
		case string:
			g.WriteString(s)
		case *string:
			g.WriteString(*s)
		case bool:
			g.WriteString(fmt.Sprintf("%t", s))
		case *bool:
			g.WriteString(fmt.Sprintf("%t", *s))
		case int:
			g.WriteString(fmt.Sprintf("%d", s))
		case *int32:
			g.WriteString(fmt.Sprintf("%d", *s))
		case *int64:
			g.WriteString(fmt.Sprintf("%d", *s))
		case float64:
			g.WriteString(fmt.Sprintf("%g", s))
		case *float64:
			g.WriteString(fmt.Sprintf("%g", *s))
		default:
			g.Fail(fmt.Sprintf("unknown type in printer: %T", v))
		}
	}
	g.WriteByte('\n')
}

// In Indents the output one tab stop.
func (g *Generator) In() { g.indent += "\t" }

// Out unindents the output one tab stop.
func (g *Generator) Out() {
	if len(g.indent) > 0 {
		g.indent = g.indent[1:]
	}
}

func (g *Generator) generateHeader() {
	g.P("// Code generated by protoc-gen-go.")
	g.P("// source: ", g.file.Name)
	g.P("// DO NOT EDIT!")
	g.P()
}
